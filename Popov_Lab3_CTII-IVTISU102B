Министерство образования и науки Республики Башкортостан\
Федеральное государственное бюджетное образовательное учреждение высшего образования «Уфимский университет науки и технологий»\
Кафедра АСУ\
Отчёт по лабораторной работе №3\
«Диаграмма как код»\
Основы современных цифровых технологий и искусственного интеллекта\
ИВТ-ИСУ-102, Попов В.Л.\
Уфа, 2024

**Цель работы**: Познакомиться с технологией Diagramm as code. Опробовать Mermaid, Draw.io, PlantUML в разных сервисах.\
**Ход работы:**
Я нашёл в Википедии статью "алгоритм" и прочёл пункт "История термина", содержимое усвоил. 
Нашёл статью "Блок-схема", прочитал, изучил.
Я спросил у Perplexity: "Когда <<блок-схемы алгоритмов>> стали называться <<схемы алгоритмов>> и почему?". 
\
![image](https://github.com/user-attachments/assets/2334fac2-7956-4675-9f8e-02af2da86438)
\
Я нашёл отечественный стандарт по рисованию схемы алгоритмов(ГОСТ-19.701-90 (ИСО 5807-85). СХЕМЫ АЛГОРИТМОВ, ПРОГРАММ, ДАННЫХ И СИСТЕМ), просмотрел его, изучил.\
Я спросил у интеллектуального помощника Perplexity, что такое Workflow Diagram и какая связь со схемой алгоритма Flowchart?\
![image](https://github.com/user-attachments/assets/76150552-2f0e-4add-bd0d-0d3d15a1dbf2)
\
![image](https://github.com/user-attachments/assets/beaf5147-2e7e-4c4f-a392-c47b28436862)
\
### Draw.io
Я запустил сервис Draw.io, изучил шаблоны Flowchart, создал пустую диаграмму.\
Чтобы узнать значения слова Terminator, я обратился к интеллектуальному помощнику.\
![image](https://github.com/user-attachments/assets/4bb4b311-b6a8-4cae-9780-1e10a381cfa0)
\
Я сделал блок-схему, состояющую из трёх блоков и сохранил её во всех 4-х форматах к себе на локальный компьютер. Изучил, как эти файлы
отображаются на экране при просмотре. Проверил, как меняется качество изображения при увеличении.\
![image](https://github.com/user-attachments/assets/89f421d2-29c2-4655-ac18-8af1337054be)\
Я разобрался, как их удобнее вставлять в файлы формата DOCX и MD
### Mermaid
Я зашёл на сервис Mermaid, создал простую диаграмму и сохранил её в разных форматах. Изучил качество изображения.
![image](https://github.com/user-attachments/assets/8b5fb77e-70fb-4e76-8777-71a697aeded9)\
Далее я скопировал диаграмму в буфер обмена. Вставив её в файл Word, делаю вывод, что копируется диаграмма в формате картинки. Также опробовал кнопки создания ссылок на картинки. Также опробовал копировать диаграмму в формате Markdown. Задание на изменение в Colab выполнил, но ничего необычного не заметил. Обе диаграммы работают правильно.

Создадим новую диаграмму, вставляя её в Github. Сразу же её усложнил, добавил в неё ветвление и вывод.
```mermaid
flowchart TD
    A([Начало]) --> B[Середина]
    B --> C{Условие}
    C -->|Да| D[/Вывести 1/]
    C -->|Нет| E[/Вывести 0/]
    D --> R([Конец])
    E --> R
```
Я переписал вручную код в ячейки Colab, как на рисунке. И вставил свою диаграмму. Всё сработало. Следующим шагом я изменил немного код, получил ссылку и вставил её уже в текстовую ячейку. Диаграмма также появилась.\
Для изучения технологий и инструментов из списка, я воспользовался интеллектуальным помощником.\
![image](https://github.com/user-attachments/assets/b0f2fdc2-da71-4e6f-8d0b-52ef8dc401c1)\
![image](https://github.com/user-attachments/assets/5c676bc4-2eae-4537-9f38-88a88e910e6d)\
![image](https://github.com/user-attachments/assets/29dffdab-a7a8-4d9b-b022-2e31007381b1)\
Дальше я перешёл на сайт "https://mermaid.ink/" и изучил Getting Started. Проверил, что это работает на моём устройстве.\
Я посмотрел статью Base64 на Википедии. Википедия говорит, что Base64 — стандарт кодирования двоичных данных при помощи только 64 символов ASCII. Алфавит кодирования содержит латинские символы A-Z, a-z, цифры 0-9 (всего 62 знака) и 2 дополнительных символа, зависящих от системы реализации.\
Перехожу к рассмотрению совместного использования Mermaid и Docker. Предварительно установил Docker Desktop на свой компьютер. Огорчился, что не задумываясь нажал "Close and Restart", из-за чего компьютер начал перезагружаться, соответственно редактирование данного документа не сохранилось. Из-за этой ошибки пришлось заново редактировать всё с предыдущей точки сохранения.\
Docker Desktop скачал, команду в Windows Powershell ввёл, контейнер работает, ссылка работает, в открывшейся ссылке ввёл свою диаграмму.
![image](https://github.com/user-attachments/assets/a4d2a79e-7ffc-4188-97cb-0424987b8bd3)\
![image](https://github.com/user-attachments/assets/02e3274a-d1e8-45cd-98ee-59130e03a7be)\
По завершении работы удалил контейнер.\
**Я спросил у интеллектуального помощника:** "Почему сервис для создания схем алгоритмов кодом называется Mermaid? Какое значение в переводе, какой смысл вложили создатели?".\
**Ответ Perplexity.ai:** "Сервис для создания схем алгоритмов под названием Mermaid получил свое имя от английского слова "mermaid", что в переводе на русский означает русалка. Это слово имеет глубокие корни в мифологии и культуре, ассоциируясь с образами красоты, магии и таинственности, что может символизировать креативность и визуализацию идей.
Создатели Mermaid, вероятно, вложили в название смысл, связанный с гибкостью и доступностью инструмента. Русалки часто изображаются как существа, которые соединяют два мира — водный и земной, что может отражать цель сервиса: соединять текстовое представление алгоритмов с визуализацией. Это позволяет пользователям легко создавать и понимать сложные структуры данных и алгоритмы.
Таким образом, название Mermaid не только привлекает внимание, но и подчеркивает функциональность сервиса как инструмента для создания наглядных и интуитивно понятных схем."
Я посмотрел статью Mind map на Википедии и обратил внимание на примеры таких диаграмм. В Википедии представлено только два примера диаграмм, поэтому я дополнительно обратился к Яндекс Картинкам.
### PlantUML
Я зашёл на статью PlantUML на Википедии. Найдена была только английская версия, читал на английском. Посмотрел, какие программмы поддерживают. Открыл страницу PlantUML на Github. Значок листика не увидел, увидел зелёный символ из квадратиков на главной картинке одного из авторов и зелёный значок переработки в некоторых названиях. Посмотрел начало описания Mind Map, обратил внимание на области применения данного инструмента.\
В данный момент я работаю разработчиком видеоигр на Unity, эту профессию и возьму для упражнения.\
Я зашёл на сервис PlantUMl Web Server и ввёл 3 строчки по инструкции.\
![image](https://github.com/user-attachments/assets/57b0d2b7-03b1-4f45-8b3c-4535a3b77e5b)\
Сохранил текст в блокнот. Я уже знаком с Version Control, но в соответствии с заданием зашёл на Википедию и ещё раз прочитал про неё.
Далее я спросил у интеллектуального помощника, что входит в обязанности Unity-разработчика и внёс их в Mindmap.
![image](https://github.com/user-attachments/assets/54e6ae1a-8cc5-4d54-8997-65c54d9a6adb)\
Теперь смотрим, как можно сделать карту более компактной. В одной строке я добавил перенос строки, а Отладка и оптимизацию можно записать в один пункт, как полишинг (от слова Polish - полировать).\
Новая Mindmap теперь выглядит так:
![image](https://github.com/user-attachments/assets/316274d6-a499-48d3-98ac-0321ca9efa38)\
Далее я попросил чат-бота создать мне MindMap. Результат:
![image](https://github.com/user-attachments/assets/a29a7c65-dbee-41a0-8394-63ef4d42b366)\
Теперь требуется найти проф. стандарт и по нему сделать карту с необходимыми навыками и умениями. Unity-разработчик это более узкий профиль, для профессии нет проф. стандарта, но проф. стандарт для профессии "Программист" будет подходить, возьмём её за основу.
Получилась MindMap:
![image](https://github.com/user-attachments/assets/3c55fe4c-d648-40dc-a2f8-edb0142871d9)\
Теперь исследуем курсы и вакансии, и добавляем оставшееся. Сразу же добавим переход в левую сторону. Конечный вариант карты для Unity-разработчика выглядит следующим образом:
![image](https://github.com/user-attachments/assets/3d3b8b71-f19c-45fb-9d0b-ddd005b0c474)
Теперь добавляем цвета и упрощаем карту, оставляя только важные моменты.
![image](https://github.com/user-attachments/assets/4629aa1c-8d7f-4ea3-9c54-18bddacbd564)
Теперь перехожу к Яндекс Вики. Узнал основные возможности данного сервиса и выяснил, что он является бесплатным. Я зашёл на статью Вики в Википедии. В переводе с гавайского Вики означает "быстрый". Это послужило названием. Позже был придуман бэкроним "What I Know Is".
Я узнал, что WYSIWYG, сокращение от английского "What You See Is What You Get" (что видишь, то и получаешь).
В яндекс Вики я сделал все три диаграммы. Изучил интерфейс, поработал в формате Markdown и воспользовался контролем версий.
![image](https://github.com/user-attachments/assets/c8eeb990-c103-4a1b-8035-2e96905c6539)\
![image](https://github.com/user-attachments/assets/737c20b9-8ada-4d23-b497-462327a80b4b)
Я установил расширение для VS Code, опробовал свою диаграмму, работает успешно. 
Перехожу к Docker. На Hub`е страницу нашёл, у интеллектуального помощника всё нужное узнал. Контейнер запустил и диаграмму ввёл.
![image](https://github.com/user-attachments/assets/18873f13-a2d5-45eb-9778-77a003ec8047)
![image](https://github.com/user-attachments/assets/f01f3553-e81e-4b23-91f5-949287aca398)
Изменения цвета работают корректно.\
**Вывод:** Я познакомился с технологией Diagram as code. Научился работать с Mermaid, Draw.io и PlantUML.
